class Transition(object):
    """
    This class defines a set of transitions which are applied to a
    configuration to get the next configuration.
    """
    # Define set of transitions
    LEFT_ARC = 'LEFTARC'
    RIGHT_ARC = 'RIGHTARC'
    SHIFT = 'SHIFT'
    REDUCE = 'REDUCE'

    def __init__(self):
        raise ValueError('Do not construct this object!')

    @staticmethod
    def left_arc(conf, relation):
        """
            :param configuration: is the current configuration
            :return : A new configuration or -1 if the pre-condition is not satisfied
        """
        #print "left_arc"
        if not conf.buffer or not conf.stack:
            return -1

        # get indices
        idx_wi = conf.stack[-1]
        idx_wj = conf.buffer[0]

        # precondition relation(wk, wi) not element A and wi not ROOT
        found = [(i,j) for i,r,j in conf.arcs if j == idx_wi]
        if len(found) != 0 or idx_wi == 0:
            return -1

        # pop stack
        conf.stack.pop()

        # add arc
        conf.arcs.append((idx_wj, relation, idx_wi))

    @staticmethod
    def right_arc(conf, relation):
        """
            :param configuration: is the current configuration
            :return : A new configuration or -1 if the pre-condition is not satisfied
        """
        #print "right_arc"
        if not conf.buffer or not conf.stack:
            return -1

        # You get this one for free! Use it as an example.

        idx_wi = conf.stack[-1]
        idx_wj = conf.buffer.pop(0)

        conf.stack.append(idx_wj)
        conf.arcs.append((idx_wi, relation, idx_wj))

    @staticmethod
    def reduce(conf):
        """
            :param configuration: is the current configuration
            :return : A new configuration or -1 if the pre-condition is not satisfied
        """
        # print "reduce"
        if not conf.stack:
            return -1

        idx_wi = conf.stack[-1]

        # precondition relation(wk, wi) exists
        found = [(i,j) for i,r,j in conf.arcs if j == idx_wi]
        if len(found) != 0:
            conf.stack.pop()
        print "reduce, %s, %s" % (conf.stack, conf.buffer)

    @staticmethod
    def shift(conf):
        """
            :param configuration: is the current configuration
            :return : A new configuration or -1 if the pre-condition is not satisfied
        """

        # print "shift"

        if not conf.buffer:
            return -1

        idx_wi = conf.buffer.pop(0)
        conf.stack.append(idx_wi)
        print "shift, %s, %s" % (conf.stack, conf.buffer)

