QUnit.module('DOMIO jQuery');

QUnit.test('compose monads', function(assert) {
  $('#qunit-fixture').append("<div id='header'></div>");

  var add = DOMIO.addClass('red');
  var remove = DOMIO.removeClass('green');
  var setState = R.compose(R.map(add), R.map(remove), DOMIO.create);

  assert.ok($('#header').addClass('green'));

  setState('#header').runIO();
  assert.ok($('#header').hasClass('red'));
  assert.ok(!$('#header').hasClass('green'));
});

QUnit.test('create and remove element', function(assert) {
  $('#qunit-fixture').append("<div id='header'></div>");

  var $elem = DOMIO.create('#header');
  var $newElem = DOMIO.create('<div id="new"></div>');
  // lift appendElement
  $elem.chain(function($el) {
    return $newElem.map(function($newEl) {
      return DOMIO.appendElement($el, $newEl);
    });
  }).runIO();
  assert.equal($('#new').length, 1);

  R.map(DOMIO.remove, $newElem).runIO();
  assert.equal($('#new').length, 0);
  assert.equal($('#header').length, 1);
});

QUnit.test('add and remove click event', function(assert) {
  assert.expect(2);
  $('#qunit-fixture').append("<div id='header'></div>");

  var addEvent = DOMIO.addEvent('click', [], function(e) {
    assert.ok(true);
  });
  var removeEvent = DOMIO.removeEvent('click');

  R.compose(R.map(addEvent), DOMIO.create)('#header').runIO();
  $('#header').trigger('click');
  $('#header').trigger('click');
  R.compose(R.map(removeEvent), DOMIO.create)('#header').runIO();
  $('#header').trigger('click');
});

QUnit.test('add and remove click event in curried steps', function(assert) {
  assert.expect(2);
  $('#qunit-fixture').append("<div id='header'></div>");

  var $header = DOMIO.create('#header');

  var baseEvent = DOMIO.addEvent('click', [], function() {
    assert.ok(true);
  });
  var addEvent = $header.map(baseEvent);

  var removeEvent = $header.map(DOMIO.removeEvent('click'));

  addEvent.runIO();
  $('#header').trigger('click');
  $('#header').trigger('click');
  removeEvent.runIO();
  $('#header').trigger('click');
});

QUnit.test('wrapping and setting class on multiple elements', function(assert) {
  $('#qunit-fixture').append("<ul id='list'>" +
    "<li id='i1'><span></span></li>" +
    "<li id='i2'><span></span></li>" +
    "<li id='i3'><span></span></li>" +
    "<li id='i4'><span></span></li>" +
    "</ul>");

  var its = DOMIO.create('#list');
  // var its = DOMIO.create('#list', 'li');
  var add = DOMIO.addClass('red');
  var setState = R.compose(R.map(add), DOMIO.create)('#list', 'li');

  setState.runIO();
  assert.ok($('#i1').hasClass('red'));
  assert.ok($('#i2').hasClass('red'));
  assert.ok($('#i3').hasClass('red'));
  assert.ok($('#i4').hasClass('red'));
});

QUnit.test('setting and getting values', function(assert) {
  $('#qunit-fixture').append("<div id='footer'><input id='day' value='Enter day'/></div>");

  var input = DOMIO.create('#day');
  assert.equal(input.map(DOMIO.getVal).runIO(), 'Enter day');
  var elem = input.map(DOMIO.setVal('Voer een dag in')).runIO();
  assert.equal(input.map(DOMIO.getVal).runIO(), 'Voer een dag in');
});

QUnit.test('set, get, remove attributes', function(assert) {
  $('#qunit-fixture').append("<div id='header'></div>");

  var $elem = DOMIO.create('#header');
  $elem.map(DOMIO.addAttr({checked: 'checked'})).runIO();
  assert.equal($elem.map(DOMIO.getAttr('checked')).runIO(), 'checked');
});

QUnit.test('set, get, remove properties', function(assert) {
  $('#qunit-fixture').append("<div id='header'></div>");

  var $elem = DOMIO.create('#header');
  $elem.map(DOMIO.addProp({checked: 'checked'})).runIO();
  assert.equal($elem.map(DOMIO.getProp('checked')).runIO(), 'checked');
  $elem.map(DOMIO.removeProp('checked')).runIO();
  assert.notEqual($elem.map(DOMIO.getProp('checked')).runIO(), 'checked');
});

QUnit.test('prepend an element', function(assert) {
  $('#qunit-fixture').append('<div id="header"><div id="fixed"></div></div>');

  var $elem = DOMIO.create('#header');
  var $content = DOMIO.create('<span></span>');

  $elem.chain(function(elem) {
    return $content.map(function(content) {
      return DOMIO.prependElement(elem, content);
    });
  }).runIO();

  assert.equal($('#header').html(), '<span></span><div id="fixed"></div>');
});

QUnit.test('unPrepend an element', function(assert) {
  $('#qunit-fixture').append('<div id="header"><span></span><div id="fixed"></div></div>');

  var $elem = DOMIO.create('#header');
  var $content = DOMIO.create('<span></span>');

  $elem.chain(function(elem) {
    return $content.map(function(content) {
      return DOMIO.unPrependElement(elem, content);
    });
  }).runIO();

  assert.equal($('#header').html(), '<div id="fixed"></div>');
});

QUnit.test('append an element', function(assert) {
  $('#qunit-fixture').append('<div id="header"><div id="fixed"></div></div>');

  var $elem = DOMIO.create('#header');
  var $content = DOMIO.create('<span></span>');

  $elem.chain(function(elem) {
    return $content.map(function(content) {
      return DOMIO.appendElement(elem, content);
    });
  }).runIO();

  assert.equal($('#header').html(), '<div id="fixed"></div><span></span>');
});

QUnit.test('unAppend an element', function(assert) {
  $('#qunit-fixture').append('<div id="header"><div id="fixed"></div><span></span></div>');

  var $elem = DOMIO.create('#header');
  var $content = DOMIO.create('<span></span>');

  $elem.chain(function(elem) {
    return $content.map(function(content) {
      return DOMIO.unAppendElement(elem, content);
    });
  }).runIO();

  assert.equal($('#header').html(), '<div id="fixed"></div>');
});

QUnit.test('insert after an element', function(assert) {
  $('#qunit-fixture').append('<div id="header"><div id="fixed"></div></div>');

  var $elem = DOMIO.create('#fixed');
  var $content = DOMIO.create('<span></span>');

  $elem.chain(function(elem) {
    return $content.map(function(content) {
      return DOMIO.insertAfterElement(elem, content);
    });
  }).runIO();

  assert.equal($('#header').html(), '<div id="fixed"></div><span></span>');
});

QUnit.test('insert before an element', function(assert) {
  $('#qunit-fixture').append('<div id="header"><div id="fixed"></div></div>');

  var $elem = DOMIO.create('#fixed');
  var $content = DOMIO.create('<span></span>');

  $elem.chain(function(elem) {
    return $content.map(function(content) {
      return DOMIO.insertBeforeElement(elem, content);
    });
  }).runIO();

  assert.equal($('#header').html(), '<span></span><div id="fixed"></div>');
});


QUnit.test('wrap an element', function(assert) {
  $('#qunit-fixture').append('<div id="header"></div>');

  var $elem = DOMIO.create('#header');
  var $content = DOMIO.create('<div id="main"></div>');

  $elem.chain(function(elem) {
    return $content.map(function(content) {
      return DOMIO.wrapElement(elem, content);
    });
  }).runIO();

  assert.equal($('#main').html(), '<div id="header"></div>');
});

QUnit.test('unwrap an element', function(assert) {
  $('#qunit-fixture').append('<div id="main"><div id="header"></div></div>');

  var $elem = DOMIO.create('#header');
  var $content = DOMIO.create('<div id="main"></div>');

  $content.map(function(content) {
      return DOMIO.unWrapElement(content);
  }).runIO();

  assert.equal($('#header').html(), '');
  assert.equal($('#header').parent().html(), '<div id="header"></div>');
});

QUnit.test('detaches and reinserts an element', function(assert) {
  $('#qunit-fixture').append('<div id="main"><div id="header"></div></div>');

  var $elem = DOMIO.create('#main');
  var $content = DOMIO.create('#header');

  var $item = $content.map(function(content) {
    return DOMIO.detachElement(content);
  }).runIO();

  assert.equal($('#main').html(), '');

  $elem.chain(function(elem) {
    return $item.map(function(content) {
      return DOMIO.appendElement(elem, content);
    })
  }).runIO();
  assert.equal($('#main').html(), '<div id="header"></div>');
});

QUnit.test('remove an element using an id', function(assert) {
  $('#qunit-fixture').append('<div id="main"><div id="header"></div></div>');

  var $elem = DOMIO.create('#main');
  var $content = DOMIO.create('<div id="header"></div>');

  $elem.chain(function(elem) {
    return $content.map(function(content) {
      return DOMIO.removeElement(elem, content);
    });
  }).runIO();

  assert.equal($('#main').html(), '');
});

QUnit.test('remove an element using a class', function(assert) {
  $('#qunit-fixture').append('<div id="main"><div class="header"></div></div>');

  var $elem = DOMIO.create('#main');
  var $content = DOMIO.create('<div class="header"></div>');

  $elem.chain(function(elem) {
    return $content.map(function(content) {
      return DOMIO.removeElement(elem, content);
    });
  }).runIO();

  assert.equal($('#main').html(), '');
});

QUnit.test('remove an element using a name', function(assert) {
  $('#qunit-fixture').append('<div id="main"><div class="header"></div></div>');

  var $elem = DOMIO.create('#main');
  var $content = DOMIO.create('<div name="header"></div>');

  $elem.chain(function(elem) {
    return $content.map(function(content) {
      return DOMIO.removeElement(elem, content);
    });
  }).runIO();

  assert.equal($('#main').html(), '');
});

QUnit.test('remove an element using its tagname', function(assert) {
  $('#qunit-fixture').append('<div id="main"><div class="header"></div></div>');

  var $elem = DOMIO.create('#main');
  var $content = DOMIO.create('<div></div>');

  $elem.chain(function(elem) {
    return $content.map(function(content) {
      return DOMIO.removeElement(elem, content);
    });
  }).runIO();

  assert.equal($('#main').html(), '');
});

QUnit.test('remove nothing when element is empty string', function(assert) {
  $('#qunit-fixture').append('<div id="main"><div class="header"></div></div>');

  var $elem = DOMIO.create('#main');
  var $content = DOMIO.create('');

  $elem.chain(function(elem) {
    return $content.map(function(content) {
      return DOMIO.removeElement(elem, content);
    });
  }).runIO();

  assert.equal($('#main').html(), '<div class="header"></div>');
});

QUnit.test('remove an element with id and changed classes', function(assert) {
  $('#qunit-fixture').append('<div id="main"><div id="header" class="extra"></div></div>');

  var $elem = DOMIO.create('#main');
  var $content = DOMIO.create('<div id="header" class="less"></div>');

  $elem.chain(function(elem) {
    return $content.map(function(content) {
      return DOMIO.removeElement(elem, content);
    });
  }).runIO();

  assert.equal($('#main').html(), '');
});
