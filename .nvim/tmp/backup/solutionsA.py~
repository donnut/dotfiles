from __future__ import division

import math
from nltk.tokenize.simple import SpaceTokenizer
import time

from collections import Counter

# Constants to be used by you when you fill the functions
START_SYMBOL = '*'
STOP_SYMBOL = 'STOP'
MINUS_INFINITY_SENTENCE_LOG_PROB = -1000

# TODO: IMPLEMENT THIS FUNCTION
# Calculates unigram, bigram, and trigram probabilities given a training corpus
# training_corpus: is a list of the sentences. Each sentence is a string with tokens separated by spaces, ending in a newline character.
# This function outputs three python dictionaries, where the keys are tuples expressing the ngram and the value is the log probability of that ngram
def calc_probabilities(training_corpus):

    tokened_sentences = [SpaceTokenizer().tokenize(sent) for sent in training_corpus]

    ## add start and end symbols
    for ts in tokened_sentences:
        ts.insert(0, START_SYMBOL)
        ts.append(STOP_SYMBOL)

    # add all tokens to one list, except * and STOP
    tokens = [word for tks in tokened_sentences for word in tks if word != START_SYMBOL and word != STOP_SYMBOL]
    nr_tokens = len(tokens)

    ## unigrams
    uni_counted = Counter(tokens)
    uni_counted[START_SYMBOL] = len(tokened_sentences)
    uni_counted[STOP_SYMBOL] = len(tokened_sentences)

    unigram_p = {word: math.log(nr/nr_tokens,2) for word, nr in uni_counted.iteritems()}

    ## bigrams
    bi_words = sorted([(tks[idx-1], word) for tks in tokened_sentences for idx, word in enumerate(tks)])
    bi_counted = dict()
    for combi in bi_words:
        if combi in bi_counted:
            bi_counted[combi] += 1
        else:
            bi_counted[combi] = 1

    bigram_p = {combi: math.log(nr/uni_counted[combi[0]], 2) for combi, nr in bi_counted.iteritems()}

    ## trigrams
    tri_words = sorted([(tks[idx-2], tks[idx-1], word) for tks in tokened_sentences for idx, word in enumerate(tks)])
    tri_counted = dict()
    for combi in tri_words:
        if combi in tri_counted:
            tri_counted[combi] += 1
        else:
            tri_counted[combi] = 1

    trigram_p = {combi: math.log(nr/bi_counted[(combi[0], combi[1])], 2) for combi, nr in tri_counted.iteritems()}

    return unigram_p, bigram_p, trigram_p

# Prints the output for q1
# Each input is a python dictionary where keys are a tuple expressing the ngram, and the value is the log probability of that ngram
def q1_output(unigrams, bigrams, trigrams, filename):
    # output probabilities
    outfile = open(filename, 'w')

    unigrams_keys = unigrams.keys()
    unigrams_keys.sort()
    for unigram in unigrams_keys:
        outfile.write('UNIGRAM ' + unigram[0] + ' ' + str(unigrams[unigram]) + '\n')

    bigrams_keys = bigrams.keys()
    bigrams_keys.sort()
    for bigram in bigrams_keys:
        outfile.write('BIGRAM ' + bigram[0] + ' ' + bigram[1]  + ' ' + str(bigrams[bigram]) + '\n')

    trigrams_keys = trigrams.keys()
    trigrams_keys.sort()
    for trigram in trigrams_keys:
        outfile.write('TRIGRAM ' + trigram[0] + ' ' + trigram[1] + ' ' + trigram[2] + ' ' + str(trigrams[trigram]) + '\n')

    outfile.close()


# TODO: IMPLEMENT THIS FUNCTION
# Calculates scores (log probabilities) for every sentence
# ngram_p: python dictionary of probabilities of uni-, bi- and trigrams.
# n: size of the ngram you want to use to compute probabilities
# corpus: list of sentences to score. Each sentence is a string with tokens separated by spaces, ending in a newline character.
# This function must return a python list of scores, where the first element is the score of the first sentence, etc.
def score(ngram_p, n, corpus):
    scores = []
    tokened_sentences = [SpaceTokenizer().tokenize(sent) for sent in corpus]
    for ts in tokened_sentences:
        ts.insert(0, '*')
        ts.append('STOP')

    if n == 1:
        for tks in tokened_sentences:
            logp = 0
            for word in tks:
                if word != '*' and word != 'STOP':
                    try:
                        logp += ngram_p[word]
                    except:
                        logp += -1000
            scores.append(logp)
    elif n == 2:

        for tks in tokened_sentences:
            logp = 0
            for i, word in enumerate(tks):
                if word != '*' and word != 'STOP':
                    try:
                        logp += ngram_p[(tks[i-1], word)]
                    except:
                        logp += -1000
            scores.append(logp)
    elif n == 3:
        for tks in tokened_sentences:
            logp = 0
            for i, word in enumerate(tks):
                if word != '*' and word != 'STOP':
                    try:
                        logp += ngram_p[(tks[i-2], tks[i-1], word)]
                    except:
                        logp += -1000
            scores.append(logp)

    return scores

# Outputs a score to a file
# scores: list of scores
# filename: is the output file name
def score_output(scores, filename):
    outfile = open(filename, 'w')
    for score in scores:
        outfile.write(str(score) + '\n')
    outfile.close()

# TODO: IMPLEMENT THIS FUNCTION
# Calculates scores (log probabilities) for every sentence with a linearly interpolated model
# Each ngram argument is a python dictionary where the keys are tuples that express an ngram and the value is the log probability of that ngram
# Like score(), this function returns a python list of scores
def linearscore(unigrams, bigrams, trigrams, corpus):
    tokened_sentences = [SpaceTokenizer().tokenize(sent) for sent in corpus]
    for ts in tokened_sentences:
        ts.insert(0, '*')
        ts.append('STOP')

    scores = []
    for tks in tokened_sentences:
        logp = 0
        for i, word in enumerate(tks):
            if word != '*' and word != 'STOP':
                try:
                    logp_u = unigrams[word]
                except:
                    logp_u = -1000
                try:
                    logp_b = bigrams[(tks[i-1], word)]
                except:
                    logp_b = -1000
                try:
                    logp_t = trigrams[(tks[i-2], tks[i-1], word)]
                except:
                    logp_t = -1000
                logp += math.log(logp_u + logp_b + logp_t, 2)
        scores.append(logp)
    return scores

DATA_PATH = 'data/'
OUTPUT_PATH = 'output/'

# DO NOT MODIFY THE MAIN FUNCTION
def main():
    # start timer
    time.clock()

    # get data
    infile = open(DATA_PATH + 'Brown_train.txt', 'r')
    corpus = infile.readlines()
    infile.close()

    # calculate ngram probabilities (question 1)
    unigrams, bigrams, trigrams = calc_probabilities(corpus)

    # question 1 output
    q1_output(unigrams, bigrams, trigrams, OUTPUT_PATH + 'A1.txt')

    # score sentences (question 2)
    uniscores = score(unigrams, 1, corpus)
    biscores = score(bigrams, 2, corpus)
    triscores = score(trigrams, 3, corpus)

    # question 2 output
    score_output(uniscores, OUTPUT_PATH + 'A2.uni.txt')
    score_output(biscores, OUTPUT_PATH + 'A2.bi.txt')
    score_output(triscores, OUTPUT_PATH + 'A2.tri.txt')

    # linear interpolation (question 3)
    linearscores = linearscore(unigrams, bigrams, trigrams, corpus)

    # question 3 output
    score_output(linearscores, OUTPUT_PATH + 'A3.txt')

    # open Sample1 and Sample2 (question 5)
    infile = open(DATA_PATH + 'Sample1.txt', 'r')
    sample1 = infile.readlines()
    infile.close()
    infile = open(DATA_PATH + 'Sample2.txt', 'r')
    sample2 = infile.readlines()
    infile.close()

    # score the samples
    sample1scores = linearscore(unigrams, bigrams, trigrams, sample1)
    sample2scores = linearscore(unigrams, bigrams, trigrams, sample2)

    # question 5 output
    score_output(sample1scores, OUTPUT_PATH + 'Sample1_scored.txt')
    score_output(sample2scores, OUTPUT_PATH + 'Sample2_scored.txt')

    # print total time to run Part A
    print "Part A time: " + str(time.clock()) + ' sec'

if __name__ == "__main__": main()
