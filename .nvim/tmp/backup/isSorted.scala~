object Sorted {

  def isSorted[A](as: Array[A], ordered: (A,A) => Boolean): Boolean = {
    @annotation.tailrec
    def loop(as: Array[A]): Boolean = {
      if (as.length == 1) true
      else if (ordered(as(0), as(1))) loop(as.tail)
      else false
    }

    loop(as)
  }

  def curry[A,B,C](f: (A, B) => C): A => (B => C) =
    (a) => (b) => f(a, b)

  def uncurry[A,B,C](f: A => B => C): (A, B) => C =
    (a, b) => f(a)(b)

  def compose[A,B,C](f: B => C, g: A => B): A => C =
    (a) => f(g(a))

  def main(args: Array[String]): Unit = {
    println(isSorted(Array(1,2,3,5), (x: Int, y: Int) => x<=y))
  }
}
