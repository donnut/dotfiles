package fpinscala.datastructures

sealed trait Tree[+A]
case class Leaf[A](value: A) extends Tree[A]
case class Branch[A](left: Tree[A], right: Tree[A]) extends Tree[A]


object Tree {

  def apply[A](ts: A*): Tree[A] =
    if (ts.length == 1) Leaf(ts.head)
    else Branch(Leaf(ts.head), apply(ts.tail: _*)) 

  def size[A](tree: Tree[A]): Int = tree match {
    case Leaf(x) => 1
    case Branch(l, r) => size(l) + size(r)
  }

  def maximum(t: Tree[Int]): Int = t match {
    case Leaf(x) => x
    case Branch(l, r) => maximum(l) max maximum(r)
  }

  def depth[A](t: Tree[A]): Int = t match {
    case Leaf(x) => 1
    case Branch(l, r) => depth(l) max depth(r)
  }


}
